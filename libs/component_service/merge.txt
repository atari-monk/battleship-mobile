File: GUIContenerFactory.js
Content:
import { GUIComponentLoader } from './gui_component/GUIComponentLoader.js'
import { GUIComponentUnloader } from './gui_component/GUIComponentUnloader.js'
import { GUIComponentStorage } from './gui_component/GUIComponentStorage.js'
import { GUIComponentContener } from './gui_component/GUIComponentContener.js'

export class GUIContenerFactory {
  generete() {
    const componentLoader = new GUIComponentLoader()
    const componentUnloader = new GUIComponentUnloader()
    const componentStorage = new GUIComponentStorage()
    return new GUIComponentContener(
      componentLoader,
      componentUnloader,
      componentStorage
    )
  }
}


File: index.js
Content:
export { GUIContenerFactory } from './GUIContenerFactory.js'
export { ServiceContenerFactory } from './ServiceContenerFactory.js'


File: ServiceContenerFactory.js
Content:
import { ServiceLoader } from './service_component/ServiceLoader.js'
import { ServiceUnloader } from './service_component/ServiceUnloader.js'
import { ServiceStorage } from './service_component/ServiceStorage.js'
import { ServiceContener } from './service_component/ServiceContener.js'

export class ServiceContenerFactory {
  generete() {
    const serviceLoader = new ServiceLoader()
    const serviceUnloader = new ServiceUnloader()
    const serviceStorage = new ServiceStorage()
    return new ServiceContener(serviceLoader, serviceUnloader, serviceStorage)
  }
}


File: gui_component\GUIComponentContener.js
Content:
export class GUIComponentContener {
  constructor(componentLoader, componentUnloader, componentStorage) {
    this.loader = componentLoader
    this.unloader = componentUnloader
    this.componentStorage = componentStorage
  }

  async loadComponent(componentName, rootDivClassName, scripts = []) {
    if (this.componentStorage.isComponentLoaded(componentName)) {
      console.warn(`Component already loaded: ${componentName}`)
      return
    }

    const basePath = `./../../../page/components/${componentName}`
    const loader = this.loader
    loader.basePath = basePath
    loader.componentName = componentName

    try {
      const html = await loader.loadHtml()
      const container = loader.generateContainer(rootDivClassName, html)
      document.body.appendChild(container)

      await loader.loadCss()
      const allModules =
        scripts.length > 0 ? await loader.loadScripts(scripts) : []

      const jsModule = await loader.loadJsModule()
      this.componentStorage.addComponent(componentName, jsModule, allModules)
    } catch (error) {
      console.error(`Error loading component: ${componentName}`, error)
    }
  }

  unloadComponent(componentName, unloadFromMemory = false) {
    const componentIndex =
      this.componentStorage.findComponentIndex(componentName)
    if (componentIndex === -1) {
      console.warn(`Component not loaded: ${componentName}`)
      return
    }

    const unloader = this.unloader
    unloader.basePath = `./components/${componentName}`
    unloader.componentName = componentName

    unloader.unloadHtml()
    unloader.unloadCss()
    unloader.unloadScripts(
      this.componentStorage.loadedComponents[componentIndex].allModules.map(
        (module) => module.name
      )
    )
    unloader.unloadJsModule()

    if (unloadFromMemory) {
      this.componentStorage.removeComponent(componentIndex)
    }

    console.log(
      `Component unloaded: ${componentName}${
        unloadFromMemory ? ' and removed from memory' : ''
      }`
    )
  }

  getComponentByName(componentName) {
    return this.componentStorage.getComponentByName(componentName)
  }
}


File: gui_component\GUIComponentLoader.js
Content:
export class GUIComponentLoader {
  set basePath(basePath) {
    this._basePath = basePath
  }

  set componentName(componentName) {
    this._componentName = componentName
  }

  async loadHtml() {
    const response = await fetch(
      `${this._basePath}/${this._componentName}.html`
    )
    return response.text()
  }

  async loadCss() {
    const link = document.createElement('link')
    link.rel = 'stylesheet'
    link.href = `${this._basePath}/${this._componentName}.css`
    document.head.appendChild(link)
  }

  generateContainer(rootDivClassName, html) {
    const container = document.createElement('div')
    container.className = rootDivClassName
    container.innerHTML = html
    return container
  }

  async loadScripts(scripts) {
    return Promise.all(scripts.map((script) => this.loadScript(script)))
  }

  async loadScript(script) {
    try {
      const module = await import(`${this._basePath}/${script}`)
      return { name: script, module }
    } catch (error) {
      console.warn(`Failed to load script: ${script}`, error)
      return null
    }
  }

  async loadJsModule() {
    try {
      return await import(`${this._basePath}/${this._componentName}.js`)
    } catch (error) {
      console.error(
        `Error in main JavaScript for component: ${this._componentName}`,
        error
      )
      return null
    }
  }
}


File: gui_component\GUIComponentStorage.js
Content:
export class GUIComponentStorage {
  constructor() {
    this.loadedComponents = []
  }

  isComponentLoaded(componentName) {
    return this.loadedComponents.some((comp) => comp.name === componentName)
  }

  findComponentIndex(componentName) {
    return this.loadedComponents.findIndex(
      (comp) => comp.name === componentName
    )
  }

  addComponent(componentName, jsModule, allModules) {
    this.loadedComponents.push({ name: componentName, jsModule, allModules })
  }

  removeComponent(componentIndex) {
    this.loadedComponents.splice(componentIndex, 1)
  }

  getComponentByName(componentName) {
    const component = this.loadedComponents.find(
      (comp) => comp.name === componentName
    )
    return component
  }
}


File: gui_component\GUIComponentUnloader.js
Content:
export class GUIComponentUnloader {
  set basePath(basePath) {
    this._basePath = basePath
  }

  set componentName(componentName) {
    this._componentName = componentName
  }

  unloadHtml() {
    const container = document.querySelector(`.${this._componentName}`)
    if (container) {
      container.remove()
    }
  }

  unloadCss() {
    const cssLink = document.querySelector(
      `link[href$="${this._componentName}.css"]`
    )
    if (cssLink) {
      cssLink.remove()
    }
  }

  unloadScripts(scripts) {
    scripts.forEach((script) => this.unloadScript(script))
  }

  unloadScript(script) {
    const scriptElement = document.querySelector(`script[src$="${script}"]`)
    if (scriptElement) {
      scriptElement.remove()
    }
  }

  unloadJsModule() {
    try {
      delete require.cache[
        require.resolve(`${this.basePath}/${this._componentName}.js`)
      ]
    } catch (error) {
      console.error(
        `Error unloading JS module for component: ${this._componentName}`,
        error
      )
    }
  }
}


File: service_component\ServiceContener.js
Content:
export class ServiceContener {
  constructor(serviceLoader, serviceUnloader, serviceStorage) {
    this.loader = serviceLoader
    this.unloader = serviceUnloader
    this.storage = serviceStorage
  }

  loadService(serviceName, serviceInstance) {
    if (this.storage.isServiceLoaded(serviceName)) {
      console.warn(`Service already loaded: ${serviceName}`)
      return
    }

    this.loader.serviceName = serviceName
    this.loader.serviceInstance = serviceInstance

    const serviceData = this.loader.loadService()
    if (serviceData) {
      this.storage.addService(serviceName, serviceData.instance)
      console.log(`Service loaded: ${serviceName}`)
    }
  }

  unloadService(serviceName) {
    const serviceIndex = this.storage.findServiceIndex(serviceName)
    if (serviceIndex === -1) {
      console.warn(`Service not loaded: ${serviceName}`)
      return
    }

    const serviceData = this.storage.loadedServices[serviceIndex]
    this.unloader.unloadService(serviceData.instance)

    this.storage.removeService(serviceIndex)
    console.log(`Service unloaded: ${serviceName}`)
  }

  getServiceByName(serviceName) {
    return this.storage.getServiceByName(serviceName)
  }
}


File: service_component\ServiceLoader.js
Content:
export class ServiceLoader {
  set serviceInstance(serviceInstance) {
    this._serviceInstance = serviceInstance
  }

  set serviceName(serviceName) {
    this._serviceName = serviceName
  }

  loadService() {
    try {
      if (!this._serviceInstance) {
        throw new Error('Service instance is not set.')
      }
      return { name: this._serviceName, instance: this._serviceInstance }
    } catch (error) {
      console.error(`Failed to load service: ${this._serviceName}`, error)
      return null
    }
  }
}


File: service_component\ServiceStorage.js
Content:
export class ServiceStorage {
  constructor() {
    this.loadedServices = []
  }

  isServiceLoaded(serviceName) {
    return this.loadedServices.some((service) => service.name === serviceName)
  }

  findServiceIndex(serviceName) {
    return this.loadedServices.findIndex(
      (service) => service.name === serviceName
    )
  }

  addService(serviceName, serviceInstance) {
    this.loadedServices.push({ name: serviceName, instance: serviceInstance })
  }

  removeService(serviceIndex) {
    this.loadedServices.splice(serviceIndex, 1)
  }

  getServiceByName(serviceName) {
    const service = this.loadedServices.find(
      (service) => service.name === serviceName
    )
    return service ? service.instance : null
  }
}


File: service_component\ServiceUnloader.js
Content:
export class ServiceUnloader {
  unloadService(serviceInstance) {
    if (serviceInstance && typeof serviceInstance.dispose === 'function') {
      serviceInstance.dispose()
    }
  }
}


